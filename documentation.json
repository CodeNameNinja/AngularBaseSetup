{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ChecklistDatabase",
            "id": "injectable-ChecklistDatabase-b338bbd51f1e2e7676604c7822a1dd3c",
            "file": "src/app/components/tree/tree.component.ts",
            "properties": [
                {
                    "name": "dataChange",
                    "defaultValue": "new BehaviorSubject<TodoItemNode[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                }
            ],
            "methods": [
                {
                    "name": "buildFileTree",
                    "args": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TodoItemNode[]",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuild the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\nThe return value is the list of `TodoItemNode`.\n",
                    "description": "<p>Build the file structure tree. The <code>value</code> is the Json object, or a sub-tree of a Json object.\nThe return value is the list of <code>TodoItemNode</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "insertItem",
                    "args": [
                        {
                            "name": "parent",
                            "type": "TodoItemNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd an item to to-do list",
                    "description": "<p>Add an item to to-do list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "TodoItemNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Checklist database, it can build a tree structured Json object.\nEach node in Json object represents a to-do item or a category.\nIf a node is a category, it has children items and new items can be added under the category.</p>\n",
            "rawdescription": "\n\nChecklist database, it can build a tree structured Json object.\nEach node in Json object represents a to-do item or a category.\nIf a node is a category, it has children items and new items can be added under the category.\n",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Injectable } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  label: string;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  label: string;\n  level: number;\n  expandable: boolean;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = [\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n];\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] {\n    return this.dataChange.value;\n  }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize(): void {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const item = obj[key];\n      const node = new TodoItemNode();\n      node.label = obj[key].name;\n      node.id = obj[key].id;\n      node.isChecked = obj[key].isChecked;\n      node.claimId = obj[key].claimId;\n      node.isPlanType = obj[key].isPlanType;\n\n      if (item != null) {\n        if (typeof item === 'object' && item.children != undefined) {\n          node.children = this.buildFileTree(item.children, level + 1);\n        } else {\n          node.label = item.name;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string): void {\n    if (parent.children) {\n      parent.children.push({ label: name } as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string): void {\n    node.label = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'app-tree',\n  templateUrl: 'tree.component.html',\n  styleUrls: ['tree.component.css'],\n  providers: [ChecklistDatabase],\n})\nexport class TreeComponent {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(\n    true /* multiple */\n  );\n\n  constructor(private database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren\n    );\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(\n      this.getLevel,\n      this.isExpandable\n    );\n    this.dataSource = new MatTreeFlatDataSource(\n      this.treeControl,\n      this.treeFlattener\n    );\n\n    database.dataChange.subscribe((data) => {\n      this.dataSource.data = data;\n    });\n  }\n\n  checkAll(): void {\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n      if (this.treeControl.dataNodes[i].isChecked) {\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\n      }\n      this.treeControl.expand(this.treeControl.dataNodes[i]);\n    }\n  }\n\n  GetCheckAll(): void {\n    console.log(this.dataSource.data);\n    // if( this.treeFlattener.flattenNodes[0].check) console.log(this.treeControl.dataNodes[i].id);\n\n    // for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n\n    //   if(this.treeControl.dataNodes[i].isChecked) console.log(this.treeControl.dataNodes[i].id);\n\n    // if(this.treeControl.dataNodes[i].isChecked){\n    //   console.log('---------------------------------------------');\n    //     console.log(this.treeControl.dataNodes[i].id);\n    //     console.log(this.treeControl.dataNodes[i].claimId);\n\n    // }\n    // }\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) =>\n    _nodeData.label === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.label === node.label\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.label = node.label;\n    flatNode.level = level;\n    flatNode.id = node.id;\n    flatNode.isChecked = node.isChecked;\n    flatNode.claimId = node.claimId;\n    flatNode.isPlanType = node.isPlanType;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every((child) => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    node.isChecked ? (node.isChecked = false) : (node.isChecked = true);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode): void {\n    const parentNode = this.flatNodeMap.get(node);\n    this.database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string): void {\n    const nestedNode = this.flatNodeMap.get(node);\n    this.database.updateItem(nestedNode!, itemValue);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 107
            },
            "accessors": {
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "[]",
                        "returnType": "TodoItemNode[]",
                        "line": 105
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "TodoItemFlatNode",
            "id": "class-TodoItemFlatNode-b338bbd51f1e2e7676604c7822a1dd3c",
            "file": "src/app/components/tree/tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Injectable } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  label: string;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  label: string;\n  level: number;\n  expandable: boolean;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = [\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n];\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] {\n    return this.dataChange.value;\n  }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize(): void {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const item = obj[key];\n      const node = new TodoItemNode();\n      node.label = obj[key].name;\n      node.id = obj[key].id;\n      node.isChecked = obj[key].isChecked;\n      node.claimId = obj[key].claimId;\n      node.isPlanType = obj[key].isPlanType;\n\n      if (item != null) {\n        if (typeof item === 'object' && item.children != undefined) {\n          node.children = this.buildFileTree(item.children, level + 1);\n        } else {\n          node.label = item.name;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string): void {\n    if (parent.children) {\n      parent.children.push({ label: name } as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string): void {\n    node.label = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'app-tree',\n  templateUrl: 'tree.component.html',\n  styleUrls: ['tree.component.css'],\n  providers: [ChecklistDatabase],\n})\nexport class TreeComponent {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(\n    true /* multiple */\n  );\n\n  constructor(private database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren\n    );\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(\n      this.getLevel,\n      this.isExpandable\n    );\n    this.dataSource = new MatTreeFlatDataSource(\n      this.treeControl,\n      this.treeFlattener\n    );\n\n    database.dataChange.subscribe((data) => {\n      this.dataSource.data = data;\n    });\n  }\n\n  checkAll(): void {\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n      if (this.treeControl.dataNodes[i].isChecked) {\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\n      }\n      this.treeControl.expand(this.treeControl.dataNodes[i]);\n    }\n  }\n\n  GetCheckAll(): void {\n    console.log(this.dataSource.data);\n    // if( this.treeFlattener.flattenNodes[0].check) console.log(this.treeControl.dataNodes[i].id);\n\n    // for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n\n    //   if(this.treeControl.dataNodes[i].isChecked) console.log(this.treeControl.dataNodes[i].id);\n\n    // if(this.treeControl.dataNodes[i].isChecked){\n    //   console.log('---------------------------------------------');\n    //     console.log(this.treeControl.dataNodes[i].id);\n    //     console.log(this.treeControl.dataNodes[i].claimId);\n\n    // }\n    // }\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) =>\n    _nodeData.label === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.label === node.label\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.label = node.label;\n    flatNode.level = level;\n    flatNode.id = node.id;\n    flatNode.isChecked = node.isChecked;\n    flatNode.claimId = node.claimId;\n    flatNode.isPlanType = node.isPlanType;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every((child) => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    node.isChecked ? (node.isChecked = false) : (node.isChecked = true);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode): void {\n    const parentNode = this.flatNodeMap.get(node);\n    this.database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string): void {\n    const nestedNode = this.flatNodeMap.get(node);\n    this.database.updateItem(nestedNode!, itemValue);\n  }\n}\n",
            "properties": [
                {
                    "name": "claimId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isPlanType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "description": "<p>Flat to-do item node with expandable and level information</p>\n",
            "rawdescription": "\nFlat to-do item node with expandable and level information",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TodoItemNode",
            "id": "class-TodoItemNode-b338bbd51f1e2e7676604c7822a1dd3c",
            "file": "src/app/components/tree/tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Injectable } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  label: string;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  label: string;\n  level: number;\n  expandable: boolean;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = [\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n];\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] {\n    return this.dataChange.value;\n  }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize(): void {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const item = obj[key];\n      const node = new TodoItemNode();\n      node.label = obj[key].name;\n      node.id = obj[key].id;\n      node.isChecked = obj[key].isChecked;\n      node.claimId = obj[key].claimId;\n      node.isPlanType = obj[key].isPlanType;\n\n      if (item != null) {\n        if (typeof item === 'object' && item.children != undefined) {\n          node.children = this.buildFileTree(item.children, level + 1);\n        } else {\n          node.label = item.name;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string): void {\n    if (parent.children) {\n      parent.children.push({ label: name } as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string): void {\n    node.label = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'app-tree',\n  templateUrl: 'tree.component.html',\n  styleUrls: ['tree.component.css'],\n  providers: [ChecklistDatabase],\n})\nexport class TreeComponent {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(\n    true /* multiple */\n  );\n\n  constructor(private database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren\n    );\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(\n      this.getLevel,\n      this.isExpandable\n    );\n    this.dataSource = new MatTreeFlatDataSource(\n      this.treeControl,\n      this.treeFlattener\n    );\n\n    database.dataChange.subscribe((data) => {\n      this.dataSource.data = data;\n    });\n  }\n\n  checkAll(): void {\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n      if (this.treeControl.dataNodes[i].isChecked) {\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\n      }\n      this.treeControl.expand(this.treeControl.dataNodes[i]);\n    }\n  }\n\n  GetCheckAll(): void {\n    console.log(this.dataSource.data);\n    // if( this.treeFlattener.flattenNodes[0].check) console.log(this.treeControl.dataNodes[i].id);\n\n    // for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n\n    //   if(this.treeControl.dataNodes[i].isChecked) console.log(this.treeControl.dataNodes[i].id);\n\n    // if(this.treeControl.dataNodes[i].isChecked){\n    //   console.log('---------------------------------------------');\n    //     console.log(this.treeControl.dataNodes[i].id);\n    //     console.log(this.treeControl.dataNodes[i].claimId);\n\n    // }\n    // }\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) =>\n    _nodeData.label === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.label === node.label\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.label = node.label;\n    flatNode.level = level;\n    flatNode.id = node.id;\n    flatNode.isChecked = node.isChecked;\n    flatNode.claimId = node.claimId;\n    flatNode.isPlanType = node.isPlanType;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every((child) => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    node.isChecked ? (node.isChecked = false) : (node.isChecked = true);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode): void {\n    const parentNode = this.flatNodeMap.get(node);\n    this.database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string): void {\n    const nestedNode = this.flatNodeMap.get(node);\n    this.database.updateItem(nestedNode!, itemValue);\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoItemNode[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "claimId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isPlanType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "description": "<p>Node for to-do item</p>\n",
            "rawdescription": "\n\nNode for to-do item\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3d9f0945d4aee910549f15414861a510",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'intro-storybook-angular-template'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'intro-storybook-angular-template';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-tree></app-tree>"
        },
        {
            "name": "StandaloneCompositionComponent",
            "id": "component-StandaloneCompositionComponent-1c60a433d49fe6fe13db44075cd0c17a",
            "file": "src/app/components/tree/compositions/standalone.composition.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "bit-composition",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  Composition component 1\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'bit-composition',\r\n  template: `\r\n      <p>\r\n        Composition component 1\r\n      </p>\r\n        `,\r\n  styles: [\r\n  ]\r\n})\r\nexport class StandaloneCompositionComponent {\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-b338bbd51f1e2e7676604c7822a1dd3c",
            "file": "src/app/components/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ChecklistDatabase"
                }
            ],
            "selector": "app-tree",
            "styleUrls": [
                "tree.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checklistSelection",
                    "defaultValue": "new SelectionModel<TodoItemFlatNode>(\n    true /* multiple */\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>The selection for checklist</p>\n",
                    "line": 191,
                    "rawdescription": "\nThe selection for checklist"
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTreeFlatDataSource<TodoItemNode | TodoItemFlatNode>",
                    "optional": false,
                    "description": "",
                    "line": 188
                },
                {
                    "name": "flatNodeMap",
                    "defaultValue": "new Map<TodoItemFlatNode, TodoItemNode>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Map from flat node to nested node. This helps us finding the nested node to be modified</p>\n",
                    "line": 173,
                    "rawdescription": "\nMap from flat node to nested node. This helps us finding the nested node to be modified"
                },
                {
                    "name": "getChildren",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 246
                },
                {
                    "name": "getLevel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 242
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 248
                },
                {
                    "name": "hasNoContent",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 250
                },
                {
                    "name": "isExpandable",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 244
                },
                {
                    "name": "nestedNodeMap",
                    "defaultValue": "new Map<TodoItemNode, TodoItemFlatNode>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Map from nested node to flattened node. This helps us to keep the same object for selection</p>\n",
                    "line": 176,
                    "rawdescription": "\nMap from nested node to flattened node. This helps us to keep the same object for selection"
                },
                {
                    "name": "newItemName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The new item&#39;s name</p>\n",
                    "line": 182,
                    "rawdescription": "\nThe new item's name"
                },
                {
                    "name": "selectedParent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoItemFlatNode | null",
                    "optional": false,
                    "description": "<p>A selected parent node to be inserted</p>\n",
                    "line": 179,
                    "rawdescription": "\nA selected parent node to be inserted"
                },
                {
                    "name": "transformer",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Transformer to convert nested node to flat node. Record the nodes in maps for later use.</p>\n",
                    "line": 256,
                    "rawdescription": "\n\nTransformer to convert nested node to flat node. Record the nodes in maps for later use.\n"
                },
                {
                    "name": "treeControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FlatTreeControl<TodoItemFlatNode>",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "treeFlattener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTreeFlattener<TodoItemNode | TodoItemFlatNode>",
                    "optional": false,
                    "description": "",
                    "line": 186
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewItem",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelect the category so we can insert the new item.",
                    "description": "<p>Select the category so we can insert the new item.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkAllParentsSelection",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRootNodeSelection",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCheck root node checked state and change it accordingly",
                    "description": "<p>Check root node checked state and change it accordingly</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "descendantsAllSelected",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether all the descendants of the node are selected.",
                    "description": "<p>Whether all the descendants of the node are selected.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "descendantsPartiallySelected",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether part of the descendants are selected",
                    "description": "<p>Whether part of the descendants are selected</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "GetCheckAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getParentNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TodoItemFlatNode | null",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSave the node to database",
                    "description": "<p>Save the node to database</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todoItemSelectionToggle",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggle the to-do item selection. Select/deselect all the descendants node",
                    "description": "<p>Toggle the to-do item selection. Select/deselect all the descendants node</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todoLeafItemSelectionToggle",
                    "args": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nToggle a leaf to-do item selection. Check all the parents to see if they changed",
                    "description": "<p>Toggle a leaf to-do item selection. Check all the parents to see if they changed</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TodoItemFlatNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { SelectionModel } from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Injectable } from '@angular/core';\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from '@angular/material/tree';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * Node for to-do item\n */\nexport class TodoItemNode {\n  children: TodoItemNode[];\n  label: string;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/** Flat to-do item node with expandable and level information */\nexport class TodoItemFlatNode {\n  label: string;\n  level: number;\n  expandable: boolean;\n  id: number;\n  isChecked: boolean;\n  isPlanType: boolean;\n  claimId: number;\n}\n\n/**\n * The Json object for to-do list data.\n */\nconst TREE_DATA = [\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n];\n\n/**\n * Checklist database, it can build a tree structured Json object.\n * Each node in Json object represents a to-do item or a category.\n * If a node is a category, it has children items and new items can be added under the category.\n */\n@Injectable()\nexport class ChecklistDatabase {\n  dataChange = new BehaviorSubject<TodoItemNode[]>([]);\n\n  get data(): TodoItemNode[] {\n    return this.dataChange.value;\n  }\n\n  constructor() {\n    this.initialize();\n  }\n\n  initialize(): void {\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\n    //     file node as children.\n    const data = this.buildFileTree(TREE_DATA, 0);\n\n    // Notify the change.\n    this.dataChange.next(data);\n  }\n\n  /**\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\n   * The return value is the list of `TodoItemNode`.\n   */\n  buildFileTree(obj: { [key: string]: any }, level: number): TodoItemNode[] {\n    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {\n      const item = obj[key];\n      const node = new TodoItemNode();\n      node.label = obj[key].name;\n      node.id = obj[key].id;\n      node.isChecked = obj[key].isChecked;\n      node.claimId = obj[key].claimId;\n      node.isPlanType = obj[key].isPlanType;\n\n      if (item != null) {\n        if (typeof item === 'object' && item.children != undefined) {\n          node.children = this.buildFileTree(item.children, level + 1);\n        } else {\n          node.label = item.name;\n        }\n      }\n\n      return accumulator.concat(node);\n    }, []);\n  }\n\n  /** Add an item to to-do list */\n  insertItem(parent: TodoItemNode, name: string): void {\n    if (parent.children) {\n      parent.children.push({ label: name } as TodoItemNode);\n      this.dataChange.next(this.data);\n    }\n  }\n\n  updateItem(node: TodoItemNode, name: string): void {\n    node.label = name;\n    this.dataChange.next(this.data);\n  }\n}\n\n/**\n * @title Tree with checkboxes\n */\n@Component({\n  selector: 'app-tree',\n  templateUrl: 'tree.component.html',\n  styleUrls: ['tree.component.css'],\n  providers: [ChecklistDatabase],\n})\nexport class TreeComponent {\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\n  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();\n\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\n  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();\n\n  /** A selected parent node to be inserted */\n  selectedParent: TodoItemFlatNode | null = null;\n\n  /** The new item's name */\n  newItemName = '';\n\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;\n\n  /** The selection for checklist */\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(\n    true /* multiple */\n  );\n\n  constructor(private database: ChecklistDatabase) {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren\n    );\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(\n      this.getLevel,\n      this.isExpandable\n    );\n    this.dataSource = new MatTreeFlatDataSource(\n      this.treeControl,\n      this.treeFlattener\n    );\n\n    database.dataChange.subscribe((data) => {\n      this.dataSource.data = data;\n    });\n  }\n\n  checkAll(): void {\n    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n      if (this.treeControl.dataNodes[i].isChecked) {\n        this.checklistSelection.toggle(this.treeControl.dataNodes[i]);\n      }\n      this.treeControl.expand(this.treeControl.dataNodes[i]);\n    }\n  }\n\n  GetCheckAll(): void {\n    console.log(this.dataSource.data);\n    // if( this.treeFlattener.flattenNodes[0].check) console.log(this.treeControl.dataNodes[i].id);\n\n    // for (let i = 0; i < this.treeControl.dataNodes.length; i++) {\n\n    //   if(this.treeControl.dataNodes[i].isChecked) console.log(this.treeControl.dataNodes[i].id);\n\n    // if(this.treeControl.dataNodes[i].isChecked){\n    //   console.log('---------------------------------------------');\n    //     console.log(this.treeControl.dataNodes[i].id);\n    //     console.log(this.treeControl.dataNodes[i].claimId);\n\n    // }\n    // }\n  }\n\n  getLevel = (node: TodoItemFlatNode) => node.level;\n\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\n\n  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;\n\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\n\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) =>\n    _nodeData.label === '';\n\n  /**\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\n   */\n  transformer = (node: TodoItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    const flatNode =\n      existingNode && existingNode.label === node.label\n        ? existingNode\n        : new TodoItemFlatNode();\n    flatNode.label = node.label;\n    flatNode.level = level;\n    flatNode.id = node.id;\n    flatNode.isChecked = node.isChecked;\n    flatNode.claimId = node.claimId;\n    flatNode.isPlanType = node.isPlanType;\n    flatNode.expandable = !!node.children;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  };\n\n  /** Whether all the descendants of the node are selected. */\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return descAllSelected;\n  }\n\n  /** Whether part of the descendants are selected */\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n\n    // Force update for the parent\n    descendants.every((child) => this.checklistSelection.isSelected(child));\n    this.checkAllParentsSelection(node);\n  }\n\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    node.isChecked ? (node.isChecked = false) : (node.isChecked = true);\n    this.checkAllParentsSelection(node);\n  }\n\n  /* Checks all the parents when a leaf node is selected/unselected */\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\n    while (parent) {\n      this.checkRootNodeSelection(parent);\n      parent = this.getParentNode(parent);\n    }\n  }\n\n  /** Check root node checked state and change it accordingly */\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\n    const nodeSelected = this.checklistSelection.isSelected(node);\n    const descendants = this.treeControl.getDescendants(node);\n    const descAllSelected = descendants.every((child) =>\n      this.checklistSelection.isSelected(child)\n    );\n    if (nodeSelected && !descAllSelected) {\n      this.checklistSelection.deselect(node);\n    } else if (!nodeSelected && descAllSelected) {\n      this.checklistSelection.select(node);\n    }\n  }\n\n  /* Get the parent node of a node */\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\n    const currentLevel = this.getLevel(node);\n\n    if (currentLevel < 1) {\n      return null;\n    }\n\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\n\n    for (let i = startIndex; i >= 0; i--) {\n      const currentNode = this.treeControl.dataNodes[i];\n\n      if (this.getLevel(currentNode) < currentLevel) {\n        return currentNode;\n      }\n    }\n    return null;\n  }\n\n  /** Select the category so we can insert the new item. */\n  addNewItem(node: TodoItemFlatNode): void {\n    const parentNode = this.flatNodeMap.get(node);\n    this.database.insertItem(parentNode!, '');\n    this.treeControl.expand(node);\n  }\n\n  /** Save the node to database */\n  saveNode(node: TodoItemFlatNode, itemValue: string): void {\n    const nestedNode = this.flatNodeMap.get(node);\n    this.database.updateItem(nestedNode!, itemValue);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "tree.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "database",
                        "type": "ChecklistDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 193,
                "jsdoctags": [
                    {
                        "name": "database",
                        "type": "ChecklistDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button (click)=\"checkAll()\">Toggle Select All</button>\n<button (click)=\"GetCheckAll()\">Get Select All</button>\n<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node\n    *matTreeNodeDef=\"let node\"\n    matTreeNodeToggle\n    matTreeNodePadding\n  >\n    <button mat-icon-button disabled></button>\n    <mat-checkbox\n      class=\"checklist-leaf-node\"\n      [checked]=\"checklistSelection.isSelected(node)\"\n      (change)=\"todoLeafItemSelectionToggle(node)\"\n      >{{ node.label }}</mat-checkbox\n    >\n  </mat-tree-node>\n\n  <mat-tree-node\n    *matTreeNodeDef=\"let node; when: hasNoContent\"\n    matTreeNodePadding\n  >\n    <button mat-icon-button disabled></button>\n    <mat-form-field>\n      <input matInput #itemValue placeholder=\"New item...\" />\n    </mat-form-field>\n    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button\n      mat-icon-button\n      matTreeNodeToggle\n      [attr.aria-label]=\"'toggle ' + node.filename\"\n    >\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\n      </mat-icon>\n    </button>\n    <mat-checkbox\n      [checked]=\"descendantsAllSelected(node)\"\n      [indeterminate]=\"descendantsPartiallySelected(node)\"\n      (change)=\"todoItemSelectionToggle(node)\"\n      >{{ node.label }}</mat-checkbox\n    >\n  </mat-tree-node>\n</mat-tree>\n"
        },
        {
            "name": "TreeCompositionComponent",
            "id": "component-TreeCompositionComponent-1325da7b16f69fa7870e182f99f89733",
            "file": "src/app/components/tree/compositions/tree.composition.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree-composition",
            "styleUrls": [],
            "styles": [],
            "template": "Composition: <h1>Hello</h1>>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tree-composition',\r\n  template: `Composition: <h1>Hello</h1>>`,\r\n})\r\nexport class TreeCompositionComponent {}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-92612ed68543860bf49b28eca1ecb634",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { TreeModule } from './components/tree/tree.module';\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, BrowserAnimationsModule, TreeModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CompositionModule",
            "id": "module-CompositionModule-e83b166489b6620e34f284e90acd8ea4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/tree/compositions/tree.composition.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TreeModule } from '../tree.module';\r\nimport { TreeCompositionComponent } from './tree.composition';\r\n\r\n@NgModule({\r\n  declarations: [TreeCompositionComponent],\r\n  imports: [TreeModule],\r\n  bootstrap: [TreeCompositionComponent],\r\n})\r\nexport class CompositionModule {}\r\n\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeCompositionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TreeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "TreeCompositionComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoMaterialModule",
            "id": "module-DemoMaterialModule-9c44a433e1dc82ba651d94cab76cef10",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material.module.ts",
            "methods": [],
            "sourceCode": "import {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {NgModule} from '@angular/core';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\n@NgModule({\r\n  exports: [\r\n    ScrollingModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatTreeModule,\r\n    MatRippleModule,  \r\n    MatNativeDateModule,\r\n    CdkTreeModule,\r\n    CdkTableModule,\r\n    DragDropModule\r\n  ]\r\n})\r\nexport class DemoMaterialModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "id": "module-TreeModule-36adbff1803ee9c053d67e52de2c1a8b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/tree/tree.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { DemoMaterialModule } from 'src/app/material.module';\r\nimport { TreeComponent } from './tree.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n  ],\r\n  imports: [\r\n    DemoMaterialModule\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n  ]\r\n})\r\nexport class TreeModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DemoMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/jest-config/__mocks__/globalMocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tree/tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tree/tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TreeComponent>",
                "defaultValue": "(args: TreeComponent) => ({\r\n  component: TreeComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TREE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/tree/tree.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n]",
                "rawdescription": "The Json object for to-do list data.",
                "description": "<p>The Json object for to-do list data.</p>\n"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/jest-config/__mocks__/globalMocks.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/jest-config/__mocks__/globalMocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n    let storage = {};\n    return {\n      getItem: key => (key in storage ? storage[key] : null),\n      setItem: (key, value) => (storage[key] = value || ''),\n      removeItem: key => delete storage[key],\n      clear: () => (storage = {}),\n    };\n  }"
                }
            ],
            "src/app/components/tree/tree.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tree/tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tree/tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TreeComponent>",
                    "defaultValue": "(args: TreeComponent) => ({\r\n  component: TreeComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/tree/tree.component.ts": [
                {
                    "name": "TREE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/tree/tree.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Test 1',\n    id: 111,\n    isChecked: true,\n    isPlanType: true,\n    claimId: 11111,\n    children: [\n      {\n        name: 'Sub - Test 1',\n        id: 22,\n        isChecked: true,\n        isPlanType: true,\n        claimId: 777777,\n        children: [\n          {\n            name: 'Sub - sub - Test 1',\n            id: 33,\n            isChecked: false,\n            isPlanType: true,\n            claimId: 6666666,\n          },\n          {\n            name: 'Sub - sub - Test 2',\n            id: 44,\n            isChecked: true,\n            isPlanType: true,\n            claimId: 5555555,\n            children: [\n              {\n                name: 'Sub - sub - sub - Test 2',\n                id: 55,\n                isChecked: true,\n                isPlanType: true,\n                claimId: 112222111,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    name: 'Test 2',\n    id: 66,\n    isChecked: false,\n    isPlanType: true,\n    claimId: 33333,\n    children: [\n      {\n        name: 'Sub - Test 2',\n        id: 77,\n        isChecked: false,\n        isPlanType: true,\n        claimId: 44444444,\n      },\n    ],\n  },\n]",
                    "rawdescription": "The Json object for to-do list data.",
                    "description": "<p>The Json object for to-do list data.</p>\n"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 16,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/compositions/standalone.composition.ts",
                "type": "component",
                "linktype": "component",
                "name": "StandaloneCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/compositions/tree.composition.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeCompositionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 48,
                "coverageCount": "13/27",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/tree/tree.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoItemFlatNode",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/tree.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoItemNode",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/tree.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChecklistDatabase",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/tree/tree.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TREE_DATA",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/tree/tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tree/tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/jest-config/__mocks__/globalMocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}